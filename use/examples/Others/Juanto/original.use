model Animals
 class Person
 attributes
   age: Integer
   height: Integer
   weight: Integer
 end
 
class Pet
 attributes
   name: String
   species: String   
   weight: Integer
 end
 
association BelongsTo between
  Person[1] role OwnerOf
  Pet[*] role BelongingTo
end 
 constraints

context Person inv validGreaterThanAge:
  self.age > 3   
  
context Person inv validSmallerThanAge:
  self.age < 8   

context Person inv validGreaterEqualThanAge:
  self.age >= 3   
  
context Person inv validSmallerEqualThanAge:
  self.age <= 8  

--context Person inv validNotEqualThanAge:
--  self.age <> 8 
   
context Person inv validEqualThanAge:
  self.age = 8  

context Person inv validGreaterAndSmallerThanAge:
  self.age > 3  and self.age < 8 

context Person inv validGreaterOrSmallerThanAge:
  self.age > 3  or self.age < 8 

context Person inv validGreaterXOrSmallerThanAge:
  self.age > 3  xor self.age < 8   

context Person inv testIf:  
if self.age=3 then self.age<1 else self.age>1 endif  

context Person inv existsAtLeastOnePerson:
  Person.allInstances()->exists(p | true)
  
context Person inv ageImpliesWeight:
  self.age > 18 implies self.weight > 50 

context Person inv ageNotUnder18:
  not (self.age < 18)
  
context Person inv noPets:
  Pet.allInstances()->select(p | false)->isEmpty()
  
context Person inv noPets2:
  Pet.allInstances()->select(p | false)->notEmpty()  

context Person inv noPets3:
  not Pet.allInstances()->exists(p | Pet.allInstances()->includes(p))

context Person inv noPets4:
  Pet.allInstances()->forAll(p | Pet.allInstances()->excludes(p))  
  
--context Person inv noPets5:
--  not Pet.allInstances()->exists(p | p.weight > 0) implies self.BelongingTo->includesAll(Pet.allInstances())
  
context Person inv noPets6:
  Pet.allInstances()->excludesAll(Pet.allInstances()->select(p | p.weight > 0))

--context Person inv AnyPersonHasNameStartingWithA:
--  Person.allInstances()->any(person | person.age > 0)

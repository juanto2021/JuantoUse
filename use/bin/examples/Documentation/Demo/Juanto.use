model Company


aggregation PredSuccEmployee between
  Employee[0..1] role predEmployee redefines pred
  Employee[0..1] role succEmployee redefines succ
end

aggregation PredSuccProject between
  Project[0..1] role predProject redefines pred
  Project[0..1] role succProject redefines succ
end

aggregation PredSucc between
  SnapshotItem[0..1] role pred
  SnapshotItem[0..1] role succ
end

association SnapshotDepartment between
  Department[*]
  Snapshot[1] role snapshotDepartment redefines snapshot
end

association SnapshotProject between
  Project[*]
  Snapshot[1] role snapshotProject redefines snapshot
end

association Filmstrip between
  Snapshot[0..1] role pred
  Snapshot[0..1] role succ
  OperationCall[0..1]
end

association SnapshotEmployee between
  Employee[*]
  Snapshot[1] role snapshotEmployee redefines snapshot
end

class Snapshot
operations
  copy() : Snapshot
    begin
      declare s : Snapshot;
      s := new Snapshot;
      for cl in self.department do 
        declare x : Department;
        x := new Department;
        insert (cl,x) into PredSuccDepartment;
        insert (x,s) into SnapshotDepartment;
      end;
      for cl in self.employee do 
        declare x : Employee;
        x := new Employee;
        insert (cl,x) into PredSuccEmployee;
        insert (x,s) into SnapshotEmployee;
      end;
      ;
      for cl in self.project do 
        declare x : Project;
        x := new Project;
        insert (cl,x) into PredSuccProject;
        insert (x,s) into SnapshotProject;
      end;
      for cl in s.department do 
        cl.budget := cl.pred.budget;
        cl.location := cl.pred.location;
        cl.name := cl.pred.name;
      end;
      for cl in s.employee do 
        cl.name := cl.pred.name;
        cl.salary := cl.pred.salary;
      end;
      for cl in s.project do 
        cl.budget := cl.pred.budget;
        cl.name := cl.pred.name;
      end;
      for cl in self.department do 
        if not cl.employee->isEmpty then
          for elem in cl.employee do 
            insert (elem.succ,cl.succ) into WorksIn
          end
        end;
        if not cl.project->isEmpty then
          for elem in cl.project do 
            insert (cl.succ,elem.succ) into Controls
          end
        end;
      end;
      for cl in self.employee do 
        if not cl.project->isEmpty then
          for elem in cl.project do 
            insert (cl.succ,elem.succ) into WorksOn
          end
        end;
      end;
      result := s;
    end
  pred() : Snapshot = 
    if (self.pred->size() = 1) then self.pred->any( $elem0:Snapshot | true ) else null endif
  succ() : Snapshot = 
    if (self.succ->size() = 1) then self.succ->any( $elem0:Snapshot | true ) else null endif
end

association SnapElement between
  SnapshotItem[*]
  Snapshot[1]
end

abstract class OperationCall
operations
  pred() : Snapshot = 
    if (self.pred->size() = 1) then self.pred->any( $elem0:Snapshot | true ) else null endif
  succ() : Snapshot = 
    if (self.succ->size() = 1) then self.succ->any( $elem0:Snapshot | true ) else null endif
end

abstract class SnapshotItem
end

aggregation PredSuccDepartment between
  Department[0..1] role predDepartment redefines pred
  Department[0..1] role succDepartment redefines succ
end

class Employee < SnapshotItem
attributes
  name : String
  salary : Integer
end

class Department < SnapshotItem
attributes
  name : String
  location : String
  budget : Integer
end

class Project < SnapshotItem
attributes
  name : String
  budget : Integer
end

association WorksIn between
  Employee[*]
  Department[1..*]
end

association WorksOn between
  Employee[*]
  Project[*]
end

association Controls between
  Department[1]
  Project[*]
end

constraints
context Department inv validLinkingControls:
  self.project->forAll( c:Project | (c.snapshot = self.snapshot) )

context Department inv validSnapshotLinking:
  (self.succ.isDefined() implies (self.succ.snapshot = self.snapshot.succ()))

context Employee inv validLinkingWorksIn:
  self.department->forAll( c:Department | (c.snapshot = self.snapshot) )

context Employee inv validLinkingWorksOn:
  self.project->forAll( c:Project | (c.snapshot = self.snapshot) )

context Employee inv validSnapshotLinking:
  (self.succ.isDefined() implies (self.succ.snapshot = self.snapshot.succ()))

context OperationCall inv assocClassBehavior:
  (((self.pred->size() = 1) and (self.succ->size() = 1)) and OperationCall.allInstances()->forAll( op:OperationCall | (((self.pred = op.pred) and (self.succ = op.succ)) implies (self = op)) ))

context Project inv validSnapshotLinking:
  (self.succ.isDefined() implies (self.succ.snapshot = self.snapshot.succ()))

context Snapshot inv cycleFree:
  Set{self.succ()}->closure( s:Snapshot | s.succ() )->excludes(self)

context Snapshot inv oneFilmstrip:
  ((Snapshot.allInstances()->select( s:Snapshot | s.pred().isUndefined() )->size() = 1) and (Snapshot.allInstances()->select( s:Snapshot | s.succ().isUndefined() )->size() = 1))

context self : Department inv MoreEmployeesThanProjects:
  (self.employee->size() >= self.project->size())

context self : Employee inv MoreProjectsHigherSalary:
  self.snapshot.employee->forAll( e1:Employee, e2:Employee | ((e1.project->size() > e2.project->size()) implies (e1.salary > e2.salary)) )

context self : Project inv BudgetWithinDepartmentBudget:
  (self.budget <= self.department.budget)

context self : Project inv EmployeesInControllingDepartment:
  self.department.employee->includesAll(self.employee)

context Snapshot::copy() : Snapshot
  pre uncopied: self.succ().isUndefined()

